#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Dec 10 22:33:56 2019

@author: JonPetter
"""

inputFile = open("../resources/Day2-Input.txt","r").read()

program = list(map(int, inputFile.split(",")))

debug = False

def addOrMult(val1, val2, opcode):
    if opcode == 1: return val1 + val2
    if opcode == 2: return val1 * val2

def intcode(program):
    """Return a intcode program that has been executed """
    #For each chunk (instruction), execute the opCodes
    for i in range(0,len(program),4):
        instruction = program[i:i+4]
        opcode = instruction[0]

        if opcode == 99: break
        elif opcode == 1 or opcode == 2:
            x1, x2, x3 = instruction[1], instruction[2], instruction[3]
            program[x3] = addOrMult(program[x1], program[x2], opcode)
        else: raise ValueError('Found wrong opcode: ', opcode)
    return program

# Initialize program:
program[1] = 12
program[2] = 2
# Run program:
program = intcode(program)
print("Result Day 2-1: ", program[0])
correctAnswer = 4484226

# Unit testing
import unittest
class TestMethods(unittest.TestCase):

    def test_upper(self):
        self.assertEqual('foo'.upper(), 'FOO')

    def test_intcode1(self):
        self.assertEqual(intcode([1,0,0,0,99]), [2,0,0,0,99])

    def test_intcode2(self):
        self.assertEqual(intcode([2,3,0,3,99]), [2,3,0,6,99])

    def test_intcode3(self):
        self.assertEqual(intcode([2,4,4,5,99,0]), [2,4,4,5,99,9801])

    def test_intcode4(self):
        self.assertEqual(intcode([1,1,1,4,99,5,6,0,99]), [30,1,1,4,2,5,6,0,99])

    def test_intcode5(self):
        self.assertEqual(intcode([1,9,10,3,2,3,11,0,99,30,40,50]),
                         [3500,9,10,70,2,3,11,0,99,30,40,50])

if __name__ == '__main__':
    unittest.main()
